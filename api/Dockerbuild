ARG BUILD_BASE_IMAGE=ubuntu:22.04
ARG TARGET_BASE_IMAGE=ubuntu:latest

FROM --platform=$BUILDPLATFORM ${BUILD_BASE_IMAGE} AS build

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG FAULT_INJECTION_ENABLED=false
ARG BUILDFLAG=""

ENV CGO_ENABLED=1
ENV GO_VERSION=1.22.4
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir /workspace /extensions
COPY ./packages /workspace/packages
COPY ./coa /workspace/coa
COPY ./api /workspace/api
WORKDIR /workspace/api
# File permissions are not preserved when copying files in ADO. 
RUN chmod +x pkg/apis/v1alpha1/providers/target/script/mock-*.sh

# Install necessary build tools, cross-compilers, and Go
RUN if [ "$BUILDFLAG" != "azure" ]; then \
    apt-get update && apt-get install -y \
    gcc g++ make curl wget git cargo \
    gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu \
    libssl-dev pkg-config protobuf-compiler \
    && wget https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz \
    && rm go${GO_VERSION}.linux-amd64.tar.gz; \
    fi

# Install Rust and rustup, overriding any existing Rust installation
RUN if [ "$BUILDFLAG" != "azure" ]; then \
    curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path \
    && . "$HOME/.cargo/env" \
    && rustup target add armv7-unknown-linux-gnueabihf aarch64-unknown-linux-gnu; \
    fi
# Set up Rust environment
ENV CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
ENV PATH=/root/.cargo/bin:$PATH
ENV PROTOC=/usr/bin/protoc

# Build the Rust component
WORKDIR /workspace/api/pkg/apis/v1alpha1/providers/target/rust

# Clean build artifacts from any previous build attempts
RUN if [ "$BUILDFLAG" != "azure" ]; then \
    cargo clean; \
    fi

# Clean previous build artifacts and build in one step
RUN if [ "$BUILDFLAG" != "azure" ]; then \
    cargo clean && \
    if [ "$TARGETARCH" = "arm" ]; then \
        CC=arm-linux-gnueabihf-gcc \
        CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf \
        RUSTFLAGS="-C linker=arm-linux-gnueabihf-gcc" \
        cargo build --release --target=armv7-unknown-linux-gnueabihf && \
        cp target/armv7-unknown-linux-gnueabihf/release/*.so /extensions/; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
        CC=aarch64-linux-gnu-gcc \
        CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu \
        cargo build --release --target=aarch64-unknown-linux-gnu && \
        cp target/aarch64-unknown-linux-gnu/release/*.so /extensions/; \
    else \
        cargo build --release && \
        cp target/release/*.so /extensions/; \
    fi; \
    fi

WORKDIR /workspace/api

# Install gofail
RUN if [ "$FAULT_INJECTION_ENABLED" = "true" ]; then \
    go install go.etcd.io/gofail@latest && \
    find /workspace/api -type d | while read -r dir; do gofail enable $dir; done && \
    find /workspace/coa -type d | while read -r dir; do gofail enable $dir; done && \
    cd /workspace/api && go get go.etcd.io/gofail/runtime; \
fi

RUN if [ "$TARGETARCH" = "arm" ]; then \
    CC=arm-linux-gnueabihf-gcc \
    RUSTFLAGS="-C linker=arm-linux-gnueabihf-gcc" \
    CGO_ENABLED=${CGO_ENABLED} GOOS=${TARGETOS} GOARCH=${TARGETARCH} GODEBUG=netdns=cgo go build -tags "$BUILDFLAG" -o /dist/symphony-api; \
elif [ "$TARGETARCH" = "arm64" ]; then \
    CC=aarch64-linux-gnu-gcc \
    CGO_ENABLED=${CGO_ENABLED} GOOS=${TARGETOS} GOARCH=${TARGETARCH} GODEBUG=netdns=cgo go build -tags "$BUILDFLAG" -o /dist/symphony-api; \
else \
    CGO_ENABLED=${CGO_ENABLED} GOOS=${TARGETOS} GOARCH=${TARGETARCH} GODEBUG=netdns=cgo go build -tags "$BUILDFLAG" -o /dist/symphony-api; \
fi
